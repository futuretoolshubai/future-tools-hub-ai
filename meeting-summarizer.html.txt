<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Meeting Summarizer</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Noto+Nastaliq+Urdu:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f4f8;
            color: #1a202c;
        }
        .urdu {
            font-family: 'Noto Nastaliq Urdu', serif;
            direction: rtl;
        }
        .card {
            background-color: #ffffff;
            border-radius: 1rem;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }
        .input-field {
            border: 2px solid #e2e8f0;
            background-color: #f8fafc;
        }
        .input-field:focus {
            border-color: #4f46e5;
            outline: none;
        }
        .output-box {
            background-color: #f8fafc;
            border-radius: 0.75rem;
            padding: 1.5rem;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);
            border-left: 4px solid #4f46e5;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .output-box:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.1);
        }
        .lang-dropdown-button {
            background-color: #4f46e5;
            color: #ffffff;
            border-radius: 9999px;
            padding: 0.5rem 1rem;
            font-weight: 600;
            transition: all 0.3s ease;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        .lang-dropdown-button:hover {
            background-color: #4338ca;
        }
        .lang-dropdown-menu {
            position: absolute;
            top: 100%;
            right: 0;
            margin-top: 0.5rem;
            background-color: #ffffff;
            border-radius: 0.75rem;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            z-index: 10;
        }
        .lang-dropdown-menu button {
            width: 100%;
            text-align: left;
            padding: 0.75rem 1.5rem;
            transition: all 0.2s ease;
            font-weight: 500;
        }
        .lang-dropdown-menu button:hover {
            background-color: #f0f4f8;
            color: #4f46e5;
        }
    </style>
</head>
<body class="flex flex-col items-center justify-center min-h-screen p-4">

    <div class="container mx-auto p-8 card max-w-5xl relative">
        <div class="absolute top-4 right-4 z-20">
            <button id="language-toggle-button" class="lang-dropdown-button">
                <span id="current-language-text">English</span>
                <svg id="dropdown-icon" class="w-4 h-4 ml-2 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path></svg>
            </button>
            <div id="language-dropdown-menu" class="lang-dropdown-menu hidden">
                <button class="lang-option" data-lang="en">English</button>
                <button class="lang-option urdu" data-lang="ur">اردو</button>
                <button class="lang-option" data-lang="es">Español</button>
                <button class="lang-option" data-lang="fr">Français</button>
            </div>
        </div>
        
        <header class="text-center mb-8">
            <h1 id="main-title" class="text-4xl font-extrabold text-gray-800 mb-2">
                AI Meeting Summarizer
            </h1>
            <p id="subtitle" class="text-gray-600 text-lg">
                Meeting Summarization Tool
            </p>
        </header>

        <section class="space-y-6">
            <!-- Input and controls -->
            <div class="space-y-4">
                <div>
                    <label id="input-label" for="meetingInput" class="block text-gray-700 font-semibold mb-2">
                        Paste your full meeting transcript here...
                    </label>
                    <textarea id="meetingInput" rows="8" placeholder="Paste your full meeting transcript here..." class="w-full p-4 rounded-lg input-field transition-colors resize-none"></textarea>
                </div>
            </div>

            <button
                id="summarizeButton"
                class="w-full bg-gradient-to-r from-purple-500 to-indigo-600 text-white font-bold py-4 px-6 rounded-xl shadow-lg hover:from-purple-600 hover:to-indigo-700 transition-all duration-300 transform hover:scale-105"
            >
                Summarize
            </button>

            <!-- Loading indicator -->
            <div id="loading-indicator" class="hidden text-center text-gray-500 text-lg py-4">
                <div class="flex items-center justify-center">
                    <svg class="animate-spin -ml-1 mr-3 h-6 w-6 text-indigo-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span id="loading-text">Summarizing your meeting...</span>
                </div>
            </div>

            <!-- Output -->
            <div id="meetingSummary" class="output-box hidden mt-8">
                <h3 id="summary-heading" class="text-2xl font-bold text-gray-800 mb-4">Summary</h3>
                <div id="summaryContent" class="space-y-4"></div>
            </div>

            <!-- Message box for errors -->
            <div id="message-box" class="fixed inset-0 flex items-center justify-center hidden bg-gray-900 bg-opacity-50 z-50">
                <div class="bg-gray-800 p-6 rounded-xl shadow-2xl text-center max-w-sm w-full">
                    <p id="message-text" class="text-lg font-medium text-white mb-4"></p>
                    <button id="close-message" class="bg-purple-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-purple-700 transition-colors">OK</button>
                </div>
            </div>
        </section>
    </div>

    <script>
        const summarizeButton = document.getElementById('summarizeButton');
        const meetingInput = document.getElementById('meetingInput');
        const meetingSummary = document.getElementById('meetingSummary');
        const summaryContent = document.getElementById('summaryContent');
        const loadingIndicator = document.getElementById('loading-indicator');
        const loadingText = document.getElementById('loading-text');
        const messageBox = document.getElementById('message-box');
        const messageText = document.getElementById('message-text');
        const closeMessageButton = document.getElementById('close-message');
        const languageToggleButton = document.getElementById('language-toggle-button');
        const languageDropdownMenu = document.getElementById('language-dropdown-menu');
        const currentLanguageText = document.getElementById('current-language-text');
        const dropdownIcon = document.getElementById('dropdown-icon');
        const mainTitle = document.getElementById('main-title');
        const subtitle = document.getElementById('subtitle');
        const inputLabel = document.getElementById('input-label');
        const summaryHeading = document.getElementById('summary-heading');
        const apiKey = ""; // Canvas will automatically provide a key for API calls

        let currentLang = 'en';

        const translations = {
            en: {
                mainTitle: "AI Meeting Summarizer",
                subtitle: "Meeting Summarization Tool",
                inputLabel: "Paste your full meeting transcript here...",
                placeholder: "Paste your full meeting transcript here...",
                summarizeButton: "Summarize",
                loading: "Summarizing your meeting...",
                summaryHeading: "Summary",
                keyPointsHeading: "Key Points",
                actionItemsHeading: "Action Items and Decisions",
                errorMessage: "Please paste a longer transcript to generate a summary.",
                apiError: "An error occurred while summarizing the transcript. Please try again or check the console for details.",
            },
            ur: {
                mainTitle: "AI میٹنگ سمریزیشن ٹول",
                subtitle: "میٹنگ سمریزیشن ٹول",
                inputLabel: "اپنی میٹنگ کی ٹرانسکرپٹ یہاں پیسٹ کریں...",
                placeholder: "اپنی میٹنگ کی ٹرانسکرپٹ یہاں پیسٹ کریں...",
                summarizeButton: "خلاصہ کریں",
                loading: "آپ کی میٹنگ کا خلاصہ تیار ہو رہا ہے...",
                summaryHeading: "خلاصہ",
                keyPointsHeading: "اہم نکات",
                actionItemsHeading: "فیصلے اور اقدامات",
                errorMessage: "خلاصہ تیار کرنے کے لیے براہ کرم ایک لمبی ٹرانسکرپٹ پیسٹ کریں۔",
                apiError: "ٹرانسکرپٹ کا خلاصہ کرتے وقت ایک خرابی پیش آئی۔ براہ کرم دوبارہ کوشش کریں یا کنسول چیک کریں۔",
            },
            es: {
                mainTitle: "Resumidor de Reuniones con IA",
                subtitle: "Herramienta de Resumen de Reuniones",
                inputLabel: "Pega la transcripción completa de tu reunión aquí...",
                placeholder: "Pega la transcripción completa de tu reunión aquí...",
                summarizeButton: "Resumir",
                loading: "Resumiendo su reunión...",
                summaryHeading: "Resumen",
                keyPointsHeading: "Puntos Clave",
                actionItemsHeading: "Elementos de Acción y Decisiones",
                errorMessage: "Por favor, pega una transcripción más larga para generar un resumen.",
                apiError: "Ocurrió un error al resumir la transcripción. Por favor, inténtalo de nuevo o revisa la consola para más detalles.",
            },
            fr: {
                mainTitle: "Résumé de Réunion IA",
                subtitle: "Outil de Résumé de Réunion",
                inputLabel: "Collez la transcription complète de votre réunion ici...",
                placeholder: "Collez la transcription complète de votre réunion ici...",
                summarizeButton: "Résumer",
                loading: "Résumé de votre réunion en cours...",
                summaryHeading: "Résumé",
                keyPointsHeading: "Points Clés",
                actionItemsHeading: "Éléments d'Action et Décisions",
                errorMessage: "Veuillez coller une transcription plus longue pour générer un résumé.",
                apiError: "Une erreur est survenue lors du résumé de la transcription. Veuillez réessayer ou vérifier la console pour plus de détails.",
            }
        };

        const languageNames = {
            en: 'English',
            ur: 'اردو',
            es: 'Español',
            fr: 'Français'
        };

        function updateUI(langCode) {
            const lang = translations[langCode];
            mainTitle.textContent = lang.mainTitle;
            subtitle.textContent = lang.subtitle;
            inputLabel.textContent = lang.inputLabel;
            meetingInput.placeholder = lang.placeholder;
            summarizeButton.textContent = lang.summarizeButton;
            loadingText.textContent = lang.loading;
            summaryHeading.textContent = lang.summaryHeading;

            // Update output headings if they exist
            const keyPointsHeading = document.getElementById('key-points-heading');
            const actionItemsHeading = document.getElementById('action-items-heading');
            if (keyPointsHeading) keyPointsHeading.textContent = lang.keyPointsHeading;
            if (actionItemsHeading) actionItemsHeading.textContent = lang.actionItemsHeading;
        }

        function setLanguage(langCode) {
            currentLang = langCode;
            currentLanguageText.textContent = languageNames[langCode];
            
            // Set the correct font family for Urdu
            const isUrdu = langCode === 'ur';
            document.body.classList.toggle('urdu', isUrdu);
            mainTitle.classList.toggle('urdu', isUrdu);
            subtitle.classList.toggle('urdu', isUrdu);
            inputLabel.classList.toggle('urdu', isUrdu);
            summaryHeading.classList.toggle('urdu', isUrdu);

            updateUI(currentLang);
        }

        languageToggleButton.addEventListener('click', () => {
            languageDropdownMenu.classList.toggle('hidden');
            dropdownIcon.classList.toggle('rotate-180');
        });

        languageDropdownMenu.addEventListener('click', (event) => {
            const selectedButton = event.target.closest('.lang-option');
            if (selectedButton) {
                const langCode = selectedButton.dataset.lang;
                setLanguage(langCode);
                languageDropdownMenu.classList.add('hidden');
                dropdownIcon.classList.remove('rotate-180');
            }
        });

        // Close the dropdown if the user clicks outside of it
        document.addEventListener('click', (event) => {
            if (!languageToggleButton.contains(event.target) && !languageDropdownMenu.contains(event.target)) {
                languageDropdownMenu.classList.add('hidden');
                dropdownIcon.classList.remove('rotate-180');
            }
        });

        function showMessage(message) {
            messageText.textContent = message;
            messageBox.classList.remove('hidden');
        }

        closeMessageButton.addEventListener('click', () => {
            messageBox.classList.add('hidden');
        });

        async function fetchWithRetry(url, options, retries = 3, delay = 1000) {
            try {
                const response = await fetch(url, options);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response;
            } catch (error) {
                if (retries > 0) {
                    await new Promise(res => setTimeout(res, delay));
                    return fetchWithRetry(url, options, retries - 1, delay * 2);
                } else {
                    throw error;
                }
            }
        }

        summarizeButton.addEventListener('click', async () => {
            const transcript = meetingInput.value.trim();
            const lang = translations[currentLang];

            if (transcript.length < 20) {
                showMessage(lang.errorMessage);
                return;
            }

            loadingIndicator.classList.remove('hidden');
            meetingSummary.classList.add('hidden');
            summaryContent.innerHTML = '';
            
            try {
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
                
                const systemPrompt = `You are an expert meeting summarizer. Take the following meeting transcript and condense it into a clear, structured summary.

                Return a single JSON object with the following keys:
                - "mainSummary": A brief, overall paragraph summary.
                - "keyPoints": An array of important bullet points.
                - "actionItems": An array of concrete, actionable tasks assigned to people, if any.
                The response should be in the same language as the transcript provided.`;

                const payload = {
                    contents: [{ parts: [{ text: `Transcript: "${transcript}"` }] }],
                    systemInstruction: { parts: [{ text: systemPrompt }] },
                    generationConfig: {
                        responseMimeType: "application/json",
                    }
                };

                const response = await fetchWithRetry(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                const result = await response.json();
                const jsonText = result.candidates?.[0]?.content?.parts?.[0]?.text;
                
                if (!jsonText) {
                    throw new Error("Failed to get a valid response from the API.");
                }

                const data = JSON.parse(jsonText);

                if (data.mainSummary) {
                    summaryContent.innerHTML += `
                        <p class="text-gray-700 leading-relaxed">${data.mainSummary}</p>
                    `;
                }

                if (data.keyPoints && data.keyPoints.length > 0) {
                    let keyPointsHtml = `<h4 id="key-points-heading" class="text-lg font-bold text-gray-800 mb-2 mt-4 urdu">${lang.keyPointsHeading}</h4><ul class="list-disc list-inside space-y-1 text-gray-600">`;
                    data.keyPoints.forEach(point => {
                        keyPointsHtml += `<li>${point}</li>`;
                    });
                    keyPointsHtml += '</ul>';
                    summaryContent.innerHTML += keyPointsHtml;
                }
                
                if (data.actionItems && data.actionItems.length > 0) {
                    let actionItemsHtml = `<h4 id="action-items-heading" class="text-lg font-bold text-gray-800 mt-4 mb-2 urdu">${lang.actionItemsHeading}</h4><ul class="list-disc list-inside space-y-1 text-gray-600">`;
                    data.actionItems.forEach(item => {
                        actionItemsHtml += `<li>${item}</li>`;
                    });
                    actionItemsHtml += '</ul>';
                    summaryContent.innerHTML += actionItemsHtml;
                }

                meetingSummary.classList.remove('hidden');

            } catch (error) {
                console.error('Error:', error);
                showMessage(lang.apiError);
            } finally {
                loadingIndicator.classList.add('hidden');
            }
        });
        
        // Initial UI update on page load
        setLanguage('en');

    </script>
</body>
</html>