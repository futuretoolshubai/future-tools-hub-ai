<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Academic Text Simplifier</title>
    <!-- Tailwind CSS for modern styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f4f8;
            color: #1a202c;
        }
        .card {
            background-color: #ffffff;
            border-radius: 1rem;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }
        .input-field {
            border: 2px solid #e2e8f0;
            background-color: #f8fafc;
        }
        .input-field:focus {
            border-color: #6366f1;
            outline: none;
        }
        .output-section {
            background-color: #ffffff;
            border-radius: 0.75rem;
            padding: 1.5rem;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);
            border-left: 4px solid #4f46e5;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .output-section:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.1);
        }
        .list-item {
            display: flex;
            align-items: flex-start;
            padding-left: 1rem;
            position: relative;
        }
        .list-item::before {
            content: '';
            width: 8px;
            height: 8px;
            background-color: #4f46e5;
            border-radius: 50%;
            position: absolute;
            left: 0;
            top: 0.5rem;
        }
        .output-container {
            animation: fadeIn 0.5s ease-in-out forwards;
            opacity: 0;
            transform: translateY(10px);
        }
        @keyframes fadeIn {
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
    </style>
</head>
<body class="flex flex-col items-center justify-center min-h-screen p-4">

    <div class="container mx-auto p-8 card max-w-4xl">
        <header class="text-center mb-8">
            <h1 class="text-4xl font-extrabold text-gray-800 mb-2">
                Academic Text Simplifier
            </h1>
            <p class="text-gray-600 text-lg">
                Make difficult writing easy to understand.
            </p>
        </header>

        <section class="space-y-6">
            <!-- Input and controls -->
            <div class="space-y-4">
                <div>
                    <label for="paragraph-input" class="block text-gray-700 font-semibold mb-2">
                        Paste a complex academic paragraph
                    </label>
                    <textarea id="paragraph-input" rows="8" placeholder="e.g., 'The mitochondrial genome encodes essential proteins for oxidative phosphorylation...'" class="w-full p-4 rounded-lg input-field transition-colors resize-none"></textarea>
                </div>
                <div class="flex items-center space-x-4">
                    <label for="grade-level" class="text-gray-700 font-semibold">
                        Simplify to:
                    </label>
                    <select id="grade-level" class="p-2 rounded-lg input-field">
                        <option value="5">Grade 5</option>
                        <option value="8" selected>Grade 8</option>
                        <option value="10">Grade 10</option>
                        <option value="12">Grade 12</option>
                        <option value="College">College Level</option>
                    </select>
                </div>
            </div>

            <button
                id="simplify-button"
                class="w-full bg-gradient-to-r from-purple-500 to-indigo-600 text-white font-bold py-4 px-6 rounded-xl shadow-lg hover:from-purple-600 hover:to-indigo-700 transition-all duration-300 transform hover:scale-105"
            >
                Simplify Text
            </button>

            <!-- Loading indicator -->
            <div id="loading-indicator" class="hidden text-center text-gray-500 text-lg py-4">
                <div class="flex items-center justify-center">
                    <svg class="animate-spin -ml-1 mr-3 h-6 w-6 text-indigo-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Simplifying your text...
                </div>
            </div>

            <!-- Output sections -->
            <div id="results-container" class="hidden space-y-8 mt-8">
                <div class="output-container">
                    <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
                        <svg class="w-7 h-7 mr-2 text-indigo-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path></svg>
                        Simplified Version
                    </h2>
                    <div id="simplified-text-output" class="output-section text-gray-700 leading-relaxed"></div>
                </div>

                <div class="output-container">
                    <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
                        <svg class="w-7 h-7 mr-2 text-indigo-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clip-rule="evenodd"></path></svg>
                        One-Sentence Summary
                    </h2>
                    <div id="summary-output" class="output-section text-gray-700 leading-relaxed"></div>
                </div>

                <div class="output-container">
                    <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
                        <svg class="w-7 h-7 mr-2 text-indigo-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path></svg>
                        Difficult Terms
                    </h2>
                    <ul id="terms-list" class="space-y-4"></ul>
                </div>

                <div class="output-container">
                    <h2 class="text-2xl font-bold text-gray-800 mb-4 flex items-center">
                        <svg class="w-7 h-7 mr-2 text-indigo-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path></svg>
                        Study Questions
                    </h2>
                    <ul id="questions-list" class="space-y-4"></ul>
                </div>
            </div>

            <!-- Message box for errors -->
            <div id="message-box" class="fixed inset-0 flex items-center justify-center hidden bg-gray-900 bg-opacity-50 z-50">
                <div class="bg-gray-800 p-6 rounded-xl shadow-2xl text-center max-w-sm w-full">
                    <p id="message-text" class="text-lg font-medium text-white mb-4"></p>
                    <button id="close-message" class="bg-purple-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-purple-700 transition-colors">OK</button>
                </div>
            </div>
        </section>
    </div>

    <script>
        const paragraphInput = document.getElementById('paragraph-input');
        const gradeLevelSelect = document.getElementById('grade-level');
        const simplifyButton = document.getElementById('simplify-button');
        const loadingIndicator = document.getElementById('loading-indicator');
        const resultsContainer = document.getElementById('results-container');
        const simplifiedTextOutput = document.getElementById('simplified-text-output');
        const summaryOutput = document.getElementById('summary-output');
        const termsList = document.getElementById('terms-list');
        const questionsList = document.getElementById('questions-list');
        const messageBox = document.getElementById('message-box');
        const messageText = document.getElementById('message-text');
        const closeMessageButton = document.getElementById('close-message');
        const apiKey = ""; // Canvas will automatically provide a key for API calls

        function showMessage(message) {
            messageText.textContent = message;
            messageBox.classList.remove('hidden');
        }

        closeMessageButton.addEventListener('click', () => {
            messageBox.classList.add('hidden');
        });

        // Exponential backoff retry function for API calls
        async function fetchWithRetry(url, options, retries = 3, delay = 1000) {
            try {
                const response = await fetch(url, options);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response;
            } catch (error) {
                if (retries > 0) {
                    await new Promise(res => setTimeout(res, delay));
                    return fetchWithRetry(url, options, retries - 1, delay * 2);
                } else {
                    throw error;
                }
            }
        }

        simplifyButton.addEventListener('click', async () => {
            const paragraph = paragraphInput.value.trim();
            const gradeLevel = gradeLevelSelect.value;

            if (!paragraph) {
                showMessage("Please paste a paragraph to simplify.");
                return;
            }

            loadingIndicator.classList.remove('hidden');
            resultsContainer.classList.add('hidden');
            
            try {
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
                
                const systemPrompt = `You are an academic simplifier. Given a paragraph, provide:
                1) A simplified version at a ${gradeLevel} reading level.
                2) A one-sentence summary.
                3) A list of difficult terms and simple definitions.
                4) Three study questions for comprehension.

                Format your response as a JSON object with the following schema:
                {
                    "simplifiedText": "string",
                    "summary": "string",
                    "difficultTerms": [
                        { "term": "string", "definition": "string" }
                    ],
                    "studyQuestions": [ "string", "string", "string" ]
                }`;

                const payload = {
                    contents: [{ parts: [{ text: `Paragraph: "${paragraph}"` }] }],
                    systemInstruction: { parts: [{ text: systemPrompt }] },
                    generationConfig: {
                        responseMimeType: "application/json",
                    }
                };

                const response = await fetchWithRetry(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                const result = await response.json();
                const jsonText = result.candidates?.[0]?.content?.parts?.[0]?.text;
                
                if (!jsonText) {
                    throw new Error("Failed to get a valid response from the API.");
                }

                const data = JSON.parse(jsonText);

                simplifiedTextOutput.textContent = data.simplifiedText || "N/A";
                summaryOutput.textContent = data.summary || "N/A";

                termsList.innerHTML = '';
                if (data.difficultTerms && Array.isArray(data.difficultTerms)) {
                    data.difficultTerms.forEach(term => {
                        const li = document.createElement('li');
                        li.className = 'output-section space-y-2';
                        li.innerHTML = `
                            <p class="font-bold text-lg text-gray-900">${term.term}</p>
                            <p class="text-sm text-gray-600">${term.definition}</p>
                        `;
                        termsList.appendChild(li);
                    });
                } else {
                     termsList.innerHTML = '<li class="text-gray-500">No difficult terms found.</li>';
                }

                questionsList.innerHTML = '';
                if (data.studyQuestions && Array.isArray(data.studyQuestions)) {
                    data.studyQuestions.forEach(question => {
                        const li = document.createElement('li');
                        li.className = 'list-item text-gray-700 leading-relaxed';
                        li.innerHTML = `<span>${question}</span>`;
                        questionsList.appendChild(li);
                    });
                } else {
                     questionsList.innerHTML = '<li class="text-gray-500">No study questions generated.</li>';
                }

            } catch (error) {
                console.error('Error:', error);
                showMessage("An error occurred. Please try again or check the console for details.");
            } finally {
                loadingIndicator.classList.add('hidden');
                resultsContainer.classList.remove('hidden');
            }
        });
    </script>

</body>
</html>
