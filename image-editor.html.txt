<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Hyper-Speed Image Editor</title>
  <link href="https://cdn.tailwindcss.com" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Inter', sans-serif;
      background-color: #111827;
      color: #e5e7eb;
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      padding: 1.5rem;
    }
    .container {
      max-width: 1024px;
      width: 100%;
      background-color: #1f2937;
      padding: 2.5rem;
      border-radius: 2rem;
      box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.2), 0 8px 10px -6px rgba(0, 0, 0, 0.1);
      border: 1px solid #374151;
    }
    .canvas-wrapper {
      position: relative;
      background-color: #2d3748;
      border-radius: 1rem;
      overflow: hidden;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100%;
      border: 2px dashed #4b5563;
    }
    canvas {
      width: 100%;
      height: auto;
      max-height: 400px;
    }
    .loading-overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.6);
      display: flex;
      justify-content: center;
      align-items: center;
      color: white;
      font-weight: 600;
      transition: opacity 0.3s ease;
      z-index: 10;
    }
    .spinner {
      border: 4px solid rgba(255, 255, 255, 0.3);
      border-top: 4px solid #fff;
      border-radius: 50%;
      width: 32px;
      height: 32px;
      animation: spin 1s linear infinite;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    .thumb-label {
      position: absolute;
      top: 1rem;
      left: 1rem;
      background-color: rgba(31, 41, 55, 0.8);
      color: #9ca3af;
      padding: 0.25rem 0.75rem;
      border-radius: 0.5rem;
      font-size: 0.75rem;
      font-weight: 500;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1 class="text-3xl sm:text-4xl font-bold text-blue-400 text-center mb-4">Hyper-Speed Image Editor</h1>
    <p class="text-gray-400 text-center mb-8">Upload and instantly edit your images with a touch of magic.</p>

    <div class="grid md:grid-cols-2 gap-10">
      <!-- Left Column: Controls and Upload -->
      <div class="flex flex-col space-y-8">
        <div>
          <label for="imgInput" class="block text-sm font-medium text-gray-300 mb-2">Upload Image (JPG/PNG)</label>
          <input type="file" id="imgInput" accept="image/*" class="w-full text-gray-400 bg-gray-700 rounded-lg cursor-pointer file:py-2 file:px-4 file:rounded-lg file:border-0 file:bg-blue-600 file:text-white file:font-semibold hover:file:bg-blue-700 transition-colors">
          <p class="mt-2 text-xs text-gray-500">For best results, use a photo with a clear subject.</p>
        </div>

        <div class="space-y-4 bg-gray-800 p-6 rounded-xl border border-gray-700">
          <h2 class="text-lg font-semibold text-gray-300 mb-2">Enhance</h2>
          <div>
            <label for="brightness" class="block text-sm font-light text-gray-400 mb-1">Brightness</label>
            <input type="range" id="brightness" min="-50" max="50" value="0" class="w-full h-2 bg-gray-600 rounded-lg appearance-none cursor-pointer">
          </div>
          <div>
            <label for="contrast" class="block text-sm font-light text-gray-400 mb-1">Contrast</label>
            <input type="range" id="contrast" min="-50" max="50" value="0" class="w-full h-2 bg-gray-600 rounded-lg appearance-none cursor-pointer">
          </div>
          <div>
            <p class="text-sm font-light text-gray-400 mb-1">Background</p>
            <div class="relative inline-block w-10 mr-2 align-middle select-none transition duration-200 ease-in">
              <input type="checkbox" name="toggle" id="toggleRemoveBg" class="toggle-checkbox absolute block w-6 h-6 rounded-full bg-gray-600 border-4 appearance-none cursor-pointer transition duration-300 ease-in-out checked:bg-blue-600 checked:right-0">
              <label for="toggleRemoveBg" class="toggle-label block overflow-hidden h-6 rounded-full cursor-pointer bg-gray-700"></label>
            </div>
            <span class="text-sm text-gray-400">Remove Background (Demo)</span>
          </div>
        </div>
        
        <button id="downloadBtn" class="w-full py-3 px-6 bg-green-600 hover:bg-green-700 text-white font-bold rounded-xl shadow-lg transition-all transform hover:scale-105 hidden">
          Download Result
        </button>
        <div id="status" class="text-sm font-medium text-center text-gray-400 mt-4">Upload an image to get started.</div>
      </div>
      
      <!-- Right Column: Canvas Previews -->
      <div class="flex flex-col space-y-6">
        <div class="canvas-wrapper flex-1">
          <span class="thumb-label">Original</span>
          <canvas id="origCanvas"></canvas>
          <div id="orig-overlay" class="loading-overlay hidden">
            <div class="spinner"></div>
          </div>
        </div>
        <div class="canvas-wrapper flex-1">
          <span class="thumb-label">Result</span>
          <canvas id="resultCanvas"></canvas>
          <div id="result-overlay" class="loading-overlay hidden">
            <div class="spinner"></div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    const apiKey = "YOUR_API_KEY_HERE"; // Placeholder for a real API key.
    // For a production-ready tool, you would use this key to call an external API service like Remove.bg.
    
    const imgInput = document.getElementById('imgInput');
    const origCanvas = document.getElementById('origCanvas');
    const resultCanvas = document.getElementById('resultCanvas');
    const brightnessSlider = document.getElementById('brightness');
    const contrastSlider = document.getElementById('contrast');
    const toggleRemoveBg = document.getElementById('toggleRemoveBg');
    const downloadBtn = document.getElementById('downloadBtn');
    const statusEl = document.getElementById('status');
    const origOverlay = document.getElementById('orig-overlay');
    const resultOverlay = document.getElementById('result-overlay');
    
    let img = new Image();

    imgInput.addEventListener('change', (e) => {
      const file = e.target.files[0];
      if (!file) return;

      statusEl.textContent = 'Processing... This will be quick!';
      origOverlay.classList.remove('hidden');
      resultOverlay.classList.remove('hidden');

      const url = URL.createObjectURL(file);
      img.onload = () => {
        URL.revokeObjectURL(url);
        applyEdits();
      };
      img.onerror = () => {
        statusEl.textContent = 'Error: Could not load image. Please try a different file.';
        origOverlay.classList.add('hidden');
        resultOverlay.classList.add('hidden');
      };
      img.src = url;
    });

    brightnessSlider.addEventListener('input', applyEdits);
    contrastSlider.addEventListener('input', applyEdits);
    toggleRemoveBg.addEventListener('change', applyEdits);

    function applyEdits() {
      if (!img.src) {
        statusEl.textContent = 'Please upload an image first.';
        return;
      }

      // Draw original image on its canvas
      origCanvas.width = img.naturalWidth;
      origCanvas.height = img.naturalHeight;
      const origCtx = origCanvas.getContext('2d');
      origCtx.drawImage(img, 0, 0);

      // Create a copy for the result canvas
      resultCanvas.width = img.naturalWidth;
      resultCanvas.height = img.naturalHeight;
      const resultCtx = resultCanvas.getContext('2d');
      resultCtx.drawImage(img, 0, 0);
      let imageData = resultCtx.getImageData(0, 0, resultCanvas.width, resultCanvas.height);
      const data = imageData.data;

      const brightness = parseInt(brightnessSlider.value, 10);
      const contrast = parseInt(contrastSlider.value, 10);
      const removeBgEnabled = toggleRemoveBg.checked;
      
      for (let i = 0; i < data.length; i += 4) {
        let r = data[i], g = data[i + 1], b = data[i + 2];
        
        // Demo Background Removal: check for bright pixels
        if (removeBgEnabled) {
          const avgBrightness = (r + g + b) / 3;
          if (avgBrightness > 240) {
            data[i + 3] = 0; // Make pixel transparent
          }
        }
        
        // Apply Brightness
        r = clamp(r + brightness, 0, 255);
        g = clamp(g + brightness, 0, 255);
        b = clamp(b + brightness, 0, 255);

        // Apply Contrast
        const factor = (259 * (contrast + 255)) / (255 * (259 - contrast));
        r = clamp(factor * (r - 128) + 128, 0, 255);
        g = clamp(factor * (g - 128) + 128, 0, 255);
        b = clamp(factor * (b - 128) + 128, 0, 255);
        
        // Update pixel data
        data[i] = r;
        data[i + 1] = g;
        data[i + 2] = b;
      }
      
      resultCtx.putImageData(imageData, 0, 0);
      statusEl.textContent = 'Edits applied instantly!';
      origOverlay.classList.add('hidden');
      resultOverlay.classList.add('hidden');
      downloadBtn.classList.remove('hidden');
    }

    downloadBtn.addEventListener('click', () => {
      const link = document.createElement('a');
      link.href = resultCanvas.toDataURL('image/png');
      link.download = 'hyper-edited.png';
      link.click();
    });

    function clamp(value, min, max) {
      return Math.max(min, Math.min(max, value));
    }
  </script>
</body>
</html>
